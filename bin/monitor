#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) Duncan Macleod (2014)
#
# This file is part of GWpy DataViewer.
#
# GWpy DataViewer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GWpy DataViewer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GWpy DataViewer.  If not, see <http://www.gnu.org/licenses/>.

"""Interact with running monitors on this system
"""

from __future__ import print_function

import time
import sys
import socket
import subprocess
import os.path
import re

from argparse import ArgumentParser

from gwpy.toolkits.dataviewer import version
from gwpy.toolkits.dataviewer.log import Logger


__version__ = version.version
__author__ = 'Duncan Macleod <duncan.macleod@ligo.org>'

# get default base
host = socket.getfqdn()
if re.search('\.cds\.(.*)\.caltech.edu\Z', host):
    base = '/data/monitors/'
else:
    base = ''

GWDV = 'gwdv'

# -----------------------------------------------------------------------------
# define actions

class Action(object):
    name = None

    def __init__(self, logger=None):
        self.logger = logger or Logger(self.name)

    @classmethod
    def add_parser(cls, parser, parents=[], **kwargs):
        return parser.add_parser(cls.name, description=cls.__doc__,
                                 help='%s a monitor' % cls.name,
                                 parents=parents)

    def get_pid_file(self, monitor):
        mon = monitor.replace(os.path.sep, '_')
        return os.path.join(args.pid_dir, '%s.pid' % mon)

    def get_pid(self, monitor):
        pidfile = self.get_pid_file(monitor)
        self.logger.debug('Reading PID file %s' % pidfile)
        pid, host = open(pidfile, 'r').readline().split()
        return int(pid), host

    def is_running(self, monitor):
        pid, executehost = self.get_pid(monitor)
        if host != executehost:
            raise RuntimeError('Monitor %r is running on %s, cannot '
                               'determine status' % (monitor, executehost))
        try:
            os.kill(pid, 0)
        except OSError:
            return False
        else:
            return pid

ACTIONS = []

class start(Action):
    name = 'start'

    @classmethod
    def add_parser(cls, *args, **kwargs):
        subparser = super(start, cls).add_parser(*args, **kwargs)
        subparser.add_argument(
            '-n', '--non-interactive', action='store_true', default=False,
            help='run monitor in non-interactive mode, default: %(default)s')
        subparser.add_argument(
            '-b', '--back-fill', action='store_true', default=False,
            help='read old data to fill plot before running monitor, '
                 'default: %(default)s')
        subparser.add_argument(
            '-t', '--no-latex', action='store_true', default=False,
            help='run monitor without latex text rendering, '
                 'default: %(default)s')
        return subparser

    def __call__(self, monitor, shell=True):
        """Start the given monitor
        """
        # check first
        try:
            running = self.is_running(monitor)
        except IOError:
            pass
        else:
            if running:
                self.logger.critical('Monitor %r already running' % monitor)
                return 1
        # start
        mon = monitor.replace(os.path.sep, '_')
        configfile = os.path.join(args.config_dir, '%s.ini' % monitor)
        logfile = os.path.join(args.log_dir, '%s.log' % mon)
        pidfile = os.path.join(args.pid_dir, '%s.pid' % mon)
        mpldir = os.path.join(args.matplotlib_dir, mon)
        if not os.path.isdir(mpldir):
            os.makedirs(mpldir)
        cmd = ['MPLCONFIGDIR=%s' % mpldir,'nohup', GWDV, configfile]
        if args.non_interactive:
            cmd.append('--non-interactive')
        if args.back_fill:
            cmd.append('--back-fill')
        if args.no_latex:
            cmd.append('--no-latex')
        cmd.append('&>%s' % logfile)

        # execute process
        self.logger.debug('Starting %r...' % monitor)
        self.logger.debug('Executing:\n    %s' % ' '.join(cmd))
        with open(logfile, 'wb') as log:
            p = subprocess.Popen(' '.join(cmd), shell=shell, stdout=log,
                                 stderr=log)
        pid = shell and p.pid + 1 or p.pid

        # write pid
        with open(pidfile, 'w') as f:
            f.write('%d %s' % (pid, host))

        if self.is_running(monitor):
            self.logger.info('Monitor %r started [%d]'
                             % (monitor, pid))
            return 0
        else:
            self.logger.error('Failed to start monitor %r' % monitor)
            return 1

ACTIONS.append(start)

class status(Action):
    name = 'status'
    def __call__(self, monitor):
        """Get status of current monitor

        Returns
        -------
        0
            if the monitor is running
        False
            if the monitor is not running
        """
        try:
            pid, executehost = self.get_pid(monitor)
        except IOError:
            self.logger.warning('Monitor %r is not running' % monitor)
            return 1
        except RuntimeError as e:
            self.logger.error(str(e))
            return 2
        try:
            os.kill(pid, 0)
        except OSError:
            self.logger.critical('Monitor %r is dead' % monitor)
            return 1

        self.logger.info('Monitor %r is running [%d]' % (monitor, pid))
        return 0

ACTIONS.append(status)


class stop(Action):
    name = 'stop'
    def __call__(self, monitor):
        try:
            pid = self.is_running(monitor)
        except IOError:
            pid = False
        except RuntimeError as e:
            self.logger.error(str(e))
            return 2
        if not pid:
            self.logger.warning('Monitor %r is not running' % monitor)
            return 1
        try:
            os.kill(pid, 9)
        except OSError:
            self.logger.critical('Cannot stop monitor %r' % monitor)
            return 2
        else:
            pidfile = self.get_pid_file(monitor)
            os.remove(pidfile)
        self.logger.info('Monitor %r stopped' % monitor)
        return 0

ACTIONS.append(stop)


class restart(start, stop):
    name = 'restart'
    def __call__(self, monitor):
        out = stop.__call__(self, monitor)
        if out > 1:
           sys.exit(out)
        return super(restart, self).__call__(monitor)

ACTIONS.append(restart)


# -----------------------------------------------------------------------------
# parse command line

ACTIONS = dict((a.name, a) for a in ACTIONS)

parser = ArgumentParser(description=__doc__)
parser.add_argument('-V', '--version', action='version',
                    help='show version number and exit')
parser.version = __version__

shared = ArgumentParser(add_help=False)
shared.add_argument('monitor', action='store', type=str, nargs='*')
shared.add_argument(
    '-d', '--config-dir', action='store', type=str, default='%setc' % base,
    help='path of configuration directory, default: %(default)s')
shared.add_argument(
    '-l', '--log-dir', action='store', type=str, default='%slog' % base,
    help='path of log directory, default: %(default)s')
shared.add_argument(
    '-p', '--pid-dir', action='store', type=str, default='%srun' % base,
    help='path of PID directory, default; %(default)s')
shared.add_argument(
    '-m', '--matplotlib-dir', action='store', type=str,
    default='%s.matplotlib' % base,
    help='path of matplotlib tex cache directory, default %(default)s')

subparsers = parser.add_subparsers(
    dest='action', title='Actions', description='Monitor action:')

# set up actions
for act in ACTIONS:
    action = ACTIONS[act]
    action.add_parser(subparsers, parents=[shared])

# read command line
args = parser.parse_args()

# execute
ec = 0

if len(args.monitor) == 1 and args.monitor[0] == 'all':
    try:
        os.chdir(args.config_dir)
    except OSError as e:
        e.args = ('No configurations found in %r' % args.config_dir,)
        raise
    else:
        args.monitor = []
        for path, dirs, files in os.walk('.', topdown=False):
            for f in files:
                if f.endswith('.ini'):
                    args.monitor.append(os.path.normpath(os.path.join(path, f)))

for monitor in args.monitor:
    if monitor.endswith('.ini'):
        monitor = monitor[:-4]
    action = ACTIONS[args.action]()
    ec = max(ec, int(action(monitor)))
    time.sleep(0.5)
sys.exit(ec)
